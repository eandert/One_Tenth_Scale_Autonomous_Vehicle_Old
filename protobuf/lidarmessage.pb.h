// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidarmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lidarmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lidarmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidarmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lidarmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidarmessage_2eproto;
namespace lidarMessage {
class lidar;
class lidarDefaultTypeInternal;
extern lidarDefaultTypeInternal _lidar_default_instance_;
}  // namespace lidarMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::lidarMessage::lidar* Arena::CreateMaybeMessage<::lidarMessage::lidar>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lidarMessage {

// ===================================================================

class lidar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lidarMessage.lidar) */ {
 public:
  inline lidar() : lidar(nullptr) {}
  virtual ~lidar();

  lidar(const lidar& from);
  lidar(lidar&& from) noexcept
    : lidar() {
    *this = ::std::move(from);
  }

  inline lidar& operator=(const lidar& from) {
    CopyFrom(from);
    return *this;
  }
  inline lidar& operator=(lidar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lidar& default_instance();

  static inline const lidar* internal_default_instance() {
    return reinterpret_cast<const lidar*>(
               &_lidar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(lidar& a, lidar& b) {
    a.Swap(&b);
  }
  inline void Swap(lidar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lidar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lidar* New() const final {
    return CreateMaybeMessage<lidar>(nullptr);
  }

  lidar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lidar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lidar& from);
  void MergeFrom(const lidar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lidar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lidarMessage.lidar";
  }
  protected:
  explicit lidar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidarmessage_2eproto);
    return ::descriptor_table_lidarmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidFieldNumber = 2,
    kRangeFieldNumber = 3,
    kDistanceFieldNumber = 4,
    kSizeFieldNumber = 1,
  };
  // repeated bool valid = 2 [packed = true];
  int valid_size() const;
  private:
  int _internal_valid_size() const;
  public:
  void clear_valid();
  private:
  bool _internal_valid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_valid() const;
  void _internal_add_valid(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_valid();
  public:
  bool valid(int index) const;
  void set_valid(int index, bool value);
  void add_valid(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      valid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_valid();

  // repeated double range = 3 [packed = true];
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  private:
  double _internal_range(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_range() const;
  void _internal_add_range(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_range();
  public:
  double range(int index) const;
  void set_range(int index, double value);
  void add_range(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_range();

  // repeated double distance = 4 [packed = true];
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  double _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_distance() const;
  void _internal_add_distance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_distance();
  public:
  double distance(int index) const;
  void set_distance(int index, double value);
  void add_distance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_distance();

  // required int32 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lidarMessage.lidar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > valid_;
  mutable std::atomic<int> _valid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > range_;
  mutable std::atomic<int> _range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_lidarmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// lidar

// required int32 size = 1;
inline bool lidar::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool lidar::has_size() const {
  return _internal_has_size();
}
inline void lidar::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lidar::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 lidar::size() const {
  // @@protoc_insertion_point(field_get:lidarMessage.lidar.size)
  return _internal_size();
}
inline void lidar::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
}
inline void lidar::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:lidarMessage.lidar.size)
}

// repeated bool valid = 2 [packed = true];
inline int lidar::_internal_valid_size() const {
  return valid_.size();
}
inline int lidar::valid_size() const {
  return _internal_valid_size();
}
inline void lidar::clear_valid() {
  valid_.Clear();
}
inline bool lidar::_internal_valid(int index) const {
  return valid_.Get(index);
}
inline bool lidar::valid(int index) const {
  // @@protoc_insertion_point(field_get:lidarMessage.lidar.valid)
  return _internal_valid(index);
}
inline void lidar::set_valid(int index, bool value) {
  valid_.Set(index, value);
  // @@protoc_insertion_point(field_set:lidarMessage.lidar.valid)
}
inline void lidar::_internal_add_valid(bool value) {
  valid_.Add(value);
}
inline void lidar::add_valid(bool value) {
  _internal_add_valid(value);
  // @@protoc_insertion_point(field_add:lidarMessage.lidar.valid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
lidar::_internal_valid() const {
  return valid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
lidar::valid() const {
  // @@protoc_insertion_point(field_list:lidarMessage.lidar.valid)
  return _internal_valid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
lidar::_internal_mutable_valid() {
  return &valid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
lidar::mutable_valid() {
  // @@protoc_insertion_point(field_mutable_list:lidarMessage.lidar.valid)
  return _internal_mutable_valid();
}

// repeated double range = 3 [packed = true];
inline int lidar::_internal_range_size() const {
  return range_.size();
}
inline int lidar::range_size() const {
  return _internal_range_size();
}
inline void lidar::clear_range() {
  range_.Clear();
}
inline double lidar::_internal_range(int index) const {
  return range_.Get(index);
}
inline double lidar::range(int index) const {
  // @@protoc_insertion_point(field_get:lidarMessage.lidar.range)
  return _internal_range(index);
}
inline void lidar::set_range(int index, double value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:lidarMessage.lidar.range)
}
inline void lidar::_internal_add_range(double value) {
  range_.Add(value);
}
inline void lidar::add_range(double value) {
  _internal_add_range(value);
  // @@protoc_insertion_point(field_add:lidarMessage.lidar.range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
lidar::_internal_range() const {
  return range_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
lidar::range() const {
  // @@protoc_insertion_point(field_list:lidarMessage.lidar.range)
  return _internal_range();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
lidar::_internal_mutable_range() {
  return &range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
lidar::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:lidarMessage.lidar.range)
  return _internal_mutable_range();
}

// repeated double distance = 4 [packed = true];
inline int lidar::_internal_distance_size() const {
  return distance_.size();
}
inline int lidar::distance_size() const {
  return _internal_distance_size();
}
inline void lidar::clear_distance() {
  distance_.Clear();
}
inline double lidar::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline double lidar::distance(int index) const {
  // @@protoc_insertion_point(field_get:lidarMessage.lidar.distance)
  return _internal_distance(index);
}
inline void lidar::set_distance(int index, double value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:lidarMessage.lidar.distance)
}
inline void lidar::_internal_add_distance(double value) {
  distance_.Add(value);
}
inline void lidar::add_distance(double value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:lidarMessage.lidar.distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
lidar::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
lidar::distance() const {
  // @@protoc_insertion_point(field_list:lidarMessage.lidar.distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
lidar::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
lidar::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:lidarMessage.lidar.distance)
  return _internal_mutable_distance();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidarMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lidarmessage_2eproto
